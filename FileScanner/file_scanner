import os
import logging
from abc import ABC, abstractmethod

class Logger:
    def __init__(self, log_file="scanner.log"):
        logging.basicConfig(
            filename=log_file,
            level=logging.INFO,
            format="%(asctime)s - %(levelname)s - %(message)s"
        )
        self.logger = logging.getLogger()
    
    def info(self, message):
        self.logger.info(message)
        print(message)
    
    def error(self, message):
        self.logger.error(message)
        print(f"ERROR: {message}")

#Base Class
class FileProcessor(ABC):
    @abstractmethod
    def process(self, file_path: str):
        #Process given file
        pass

#Main class
class FileScanner:
    def __init__(self, directory: str, processor: FileProcessor, logger: Logger):
        self.directory = directory
        self.processor = processor
        self.logger = logger
    
    def scan(self):
        #Scans directory and processes each file"
        if not os.path.exists(self.directory):
            self.logger.error(f"Directory '{self.directory} not found.")
            return

        self.logger.info(f"Scanning directory: {self.directory}")
        for root, _, files in os.walk(self.directory):
            for file in files:
                file_path = os.path.join(root, file)
                self.processor.process(file_path)
                try:
                    self.processor.process(file_path)
                    self.logger.info(f"Processed file: {file_path}")
                except Exception as e:
                    self.logger.error(f"Error processing {file_path}: {e}")


class TextFileProcessor(FileProcessor):
    def __init__(self, logger: Logger):
        self.logger = logger
        
    def process(self, file_path: str):
        #Processes text files by reading the first line
        if file_path.endswith(".txt"):
            try:
                with open(file_path, "r", encoding="utf-8") as file:
                    first_line = file.readline().strip()
                    self.logger.info(f"Processing {file_path}: {first_line}")
            except Exception as e:
                self.logger.error(f"Failed to read {file_path}: {e}")




if __name__ == "__main__":
    directory = input("Enter directory to scan: ")
    logger = Logger()
    
    if not os.path.isdir(directory):
        logger.error("Error: Invalid directory path. Please enter a valid folder.")
    else:
        processor = TextFileProcessor(logger)
        scanner = FileScanner(directory, processor, logger)
        scanner.scan()

